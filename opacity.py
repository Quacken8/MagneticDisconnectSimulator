#!/usr/bin/env python3
"""
interpolates opacity from a table generated by MESA, in particular the "MESA modules outside MESA" thingy
"""

import numpy as np
import constants as c

pathToOpacityTable = "externalData/kappasFromMESA"

logTs, logRhos, kappas = np.loadtxt(pathToOpacityTable, skiprows=1, usecols=(1,2,3)).T

#TODO - maybe unnecessary? maybe working in logs will be better?
# convert to straight variables
Ts = np.power(10, logTs)
Rhos = np.power(10, logRhos)

# convert to SI from cgs
Rhos *= c.gram/(c.cm**3)
kappas  *= c.cm**2/c.gram



modelSPath = "externalData/model_S.dat"
Ts, Ps, kappas = np.loadtxt(modelSPath, skiprows=1, usecols=(1,2,4)).T
from scipy.interpolate import NearestNDInterpolator
inteprloatedKappas = NearestNDInterpolator(list(zip(Ts, Ps)), kappas)
def modelSNearestOpacity(temperature:float|np.ndarray, pressure:float|np.ndarray)->float|np.ndarray:
    return inteprloatedKappas(temperature, pressure)



def main():
    """debugging function for this file"""
    import matplotlib.pyplot as plt
    resolution = 100
    Ts = np.logspace(3, 7, num = resolution)
    Ps = np.logspace(1, 16, num = resolution)

    TMesh, PMesh = np.meshgrid(Ts, Ps)
    plotkappas = modelSNearestOpacity(TMesh, PMesh)

    plt.pcolormesh(TMesh, PMesh, plotkappas, shading="auto")
    plt.plot(Ts, Ps, "ok", label="input point")
    plt.xlabel("Temperature [K]")
    plt.ylabel("Pressure [Pa]")
    plt.legend()  
    plt.colorbar()
    plt.show()


if __name__ == "__main__":
    main()